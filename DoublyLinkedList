// Node class for Doubly Linked List
class DoublyLinkedNode {
    int data;
    DoublyLinkedNode prev;
    DoublyLinkedNode next;

    public DoublyLinkedNode(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

 class DoublyLinkedList {
    private DoublyLinkedNode head;

    // Insert at the end
    public void insertAtEnd(int data) {
        DoublyLinkedNode newNode = new DoublyLinkedNode(data);
        if (head == null) {
            head = newNode;
            return;
        }
        DoublyLinkedNode temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }

    // Insert at the beginning
    public void insertAtBeginning(int data) {
        DoublyLinkedNode newNode = new DoublyLinkedNode(data);
        if (head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head.prev = newNode;
        head = newNode;
    }

    // Delete a node by value
    public void deleteByValue(int data) {
        if (head == null) return;

        DoublyLinkedNode temp = head;

        
        if (temp.data == data) {
            head = temp.next;
            if (head != null) head.prev = null;
            return;
        }

        while (temp != null && temp.data != data) {
            temp = temp.next;
        }

        if (temp == null) return; // not found

        if (temp.next != null) temp.next.prev = temp.prev;
        if (temp.prev != null) temp.prev.next = temp.next;
    }

    // Display list forward
    public void displayForward() {
        DoublyLinkedNode temp = head;
        System.out.print("Forward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    // Display list backward
    public void displayBackward() {
        DoublyLinkedNode temp = head;
        if (temp == null) return;

        
        while (temp.next != null) {
            temp = temp.next;
        }

        System.out.print("Backward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }

   
    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();

        dll.insertAtEnd(10);
        dll.insertAtEnd(20);
        dll.insertAtBeginning(5);
        dll.insertAtBeginning(1);
        dll.displayForward();   
        dll.displayBackward();  
        dll.deleteByValue(10);
        dll.displayForward(); 
    }
}

----------------------------output-------------------------

Forward: 1 5 10 20 
Backward: 20 10 5 1 
Forward: 1 5 20 
